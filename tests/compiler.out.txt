compiling:
(ns core)

IR:
NS core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("core"); 
return true

********************************************************************************

compiling:
(ns core)

IR:
NS core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("core"); 
return true

********************************************************************************

compiling:
(def z2ljr2jlslfl3jf 1)

IR:
DEFSYM z2ljr2jlslfl3jf := PRIMITIVE 1
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

__core.z2ljr2jlslfl3jf = 1
return true

********************************************************************************

compiling:
(ns core)

IR:
NS core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("core"); 
return true

********************************************************************************

compiling:
(def a 3)

IR:
DEFSYM a := PRIMITIVE 3
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

__core.a = 3
return true

********************************************************************************

compiling:
(def b 4)

IR:
DEFSYM b := PRIMITIVE 4
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

__core.b = 4
return true

********************************************************************************

compiling:
(def b a)

IR:
DEFSYM b := PRIMITIVE a
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

__core.b = __core.a
return true

********************************************************************************

compiling:
(ns core)

IR:
NS core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("core"); 
return true

********************************************************************************

compiling:
(def print (fn [obj] (_raw_ "print(tostring(obj))")))

IR:
DEFSYM print := FUNC obj
VARFENCE 
RET RAW print(tostring(obj))
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.print(obj)
    do
        return print(tostring(obj))
    end
end
return true

********************************************************************************

compiling:
(def + (fn [x y] (_raw_ "x + y")))

IR:
DEFSYM + := FUNC x, y
VARFENCE 
RET RAW x + y
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.__PLUS__(x, y)
    do
        return x + y
    end
end
return true

********************************************************************************

compiling:
(def first (fn [cell] (_raw_ "cell[1]")))

IR:
DEFSYM first := FUNC cell
VARFENCE 
RET RAW cell[1]
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.first(cell)
    do
        return cell[1]
    end
end
return true

********************************************************************************

compiling:
(def rest (fn [cell] (_raw_ "cell[2]")))

IR:
DEFSYM rest := FUNC cell
VARFENCE 
RET RAW cell[2]
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.rest(cell)
    do
        return cell[2]
    end
end
return true

********************************************************************************

compiling:
(def second (fn [coll] (first (rest coll))))

IR:
DEFSYM second := FUNC coll
VARFENCE 
VAR __arg_0 := CALL rest, coll
RET CALL first, __arg_0
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.second(coll)
    do
        local __arg_0 = __core.rest(coll)
        return __core.first(__arg_0)
    end
end
return true

********************************************************************************

compiling:
(print "asdf")

IR:
RET CALL print, "asdf"

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

return __core.print("asdf")

********************************************************************************

compiling:
(print (second (quote (42 43))))

IR:
VAR __arg_2 := DATA table: 0x1a594058
VAR __arg_1 := CALL second, __arg_2
RET CALL print, __arg_1

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __data0 = tsukuyomi._get_data(0)

local __arg_2 = __data0
local __arg_1 = __core.second(__arg_2)
return __core.print(__arg_1)

********************************************************************************

compiling:
(print (first (quote (3 4 5))))

IR:
VAR __arg_4 := DATA table: 0x1a5945b0
VAR __arg_3 := CALL first, __arg_4
RET CALL print, __arg_3

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __data1 = tsukuyomi._get_data(1)

local __arg_4 = __data1
local __arg_3 = __core.first(__arg_4)
return __core.print(__arg_3)

********************************************************************************

compiling:
(def user/test "lisp")

IR:
DEFSYM user/test := PRIMITIVE "lisp"
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __user = tsukuyomi.get_namespace("user")

__user.test = "lisp"
return true

********************************************************************************

compiling:
(def f (fn [foo] ((fn [bar] (+ foo bar)) 42)))

IR:
DEFSYM f := FUNC foo
VARFENCE 
VAR __arg_5 := FUNC bar
VARFENCE 
RET CALL +, foo, bar
ENDVARFENCE 
ENDFUNC 
RET CALL __arg_5, 42
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.f(foo)
    do
        local function __arg_5(bar)
            do
                return __core.__PLUS__(foo, bar)
            end
        end
        return __arg_5(42)
    end
end
return true

********************************************************************************

compiling:
(print (f 43))

IR:
VAR __arg_6 := CALL f, 43
RET CALL print, __arg_6

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __arg_6 = __core.f(43)
return __core.print(__arg_6)

********************************************************************************

compiling:
(if false (print "pepperoni"))

IR:
EMPTYVAR __if_ret_7
VARFENCE 
VAR __cond_8 := PRIMITIVE false
IF __cond_8
CALL print, "pepperoni"
ELSE 
PRIMITIVE nil
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_7

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_7
do
    local __cond_8 = false
    if __cond_8 then
        __if_ret_7 = __core.print("pepperoni")
    else
        __if_ret_7 = nil
    end
end
return __if_ret_7

********************************************************************************

compiling:
(if nil (print "hoagie"))

IR:
EMPTYVAR __if_ret_9
VARFENCE 
VAR __cond_10 := PRIMITIVE nil
IF __cond_10
CALL print, "hoagie"
ELSE 
PRIMITIVE nil
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_9

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_9
do
    local __cond_10 = nil
    if __cond_10 then
        __if_ret_9 = __core.print("hoagie")
    else
        __if_ret_9 = nil
    end
end
return __if_ret_9

********************************************************************************

compiling:
(if true (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_11
VARFENCE 
VAR __cond_12 := PRIMITIVE true
IF __cond_12
CALL print, "pizza"
ELSE 
CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_11

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_11
do
    local __cond_12 = true
    if __cond_12 then
        __if_ret_11 = __core.print("pizza")
    else
        __if_ret_11 = __core.print("hotdog")
    end
end
return __if_ret_11

********************************************************************************

compiling:
(if false (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_13
VARFENCE 
VAR __cond_14 := PRIMITIVE false
IF __cond_14
CALL print, "pizza"
ELSE 
CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_13

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_13
do
    local __cond_14 = false
    if __cond_14 then
        __if_ret_13 = __core.print("pizza")
    else
        __if_ret_13 = __core.print("hotdog")
    end
end
return __if_ret_13

********************************************************************************

compiling:
(if ((fn [] (+ 1 1))) (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_15
VARFENCE 
VAR __arg_17 := FUNC 
VARFENCE 
RET CALL +, 1, 1
ENDVARFENCE 
ENDFUNC 
VAR __cond_16 := CALL __arg_17
IF __cond_16
CALL print, "pizza"
ELSE 
CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_15

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_15
do
    local function __arg_17()
        do
            return __core.__PLUS__(1, 1)
        end
    end
    local __cond_16 = __arg_17()
    if __cond_16 then
        __if_ret_15 = __core.print("pizza")
    else
        __if_ret_15 = __core.print("hotdog")
    end
end
return __if_ret_15

********************************************************************************

compiling:
(if ((fn [] nil)) (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_18
VARFENCE 
VAR __arg_20 := FUNC 
VARFENCE 
RET PRIMITIVE nil
ENDVARFENCE 
ENDFUNC 
VAR __cond_19 := CALL __arg_20
IF __cond_19
CALL print, "pizza"
ELSE 
CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_18

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_18
do
    local function __arg_20()
        do
            return nil
        end
    end
    local __cond_19 = __arg_20()
    if __cond_19 then
        __if_ret_18 = __core.print("pizza")
    else
        __if_ret_18 = __core.print("hotdog")
    end
end
return __if_ret_18

********************************************************************************

compiling:
(if ((fn [] true)) ((fn [x] (print (+ 1 x))) 24) (print "hotdog"))

IR:
EMPTYVAR __if_ret_21
VARFENCE 
VAR __arg_24 := FUNC 
VARFENCE 
RET PRIMITIVE true
ENDVARFENCE 
ENDFUNC 
VAR __cond_22 := CALL __arg_24
IF __cond_22
VAR __arg_23 := FUNC x
VARFENCE 
VAR __arg_25 := CALL +, 1, x
RET CALL print, __arg_25
ENDVARFENCE 
ENDFUNC 
CALL __arg_23, 24
ELSE 
CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_21

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_21
do
    local function __arg_24()
        do
            return true
        end
    end
    local __cond_22 = __arg_24()
    if __cond_22 then
        local function __arg_23(x)
            do
                local __arg_25 = __core.__PLUS__(1, x)
                return __core.print(__arg_25)
            end
        end
        __if_ret_21 = __arg_23(24)
    else
        __if_ret_21 = __core.print("hotdog")
    end
end
return __if_ret_21

********************************************************************************

compiling:
(def a (if true "mayo" "ketchup"))

IR:
EMPTYVAR __if_ret_26
VARFENCE 
VAR __cond_27 := PRIMITIVE true
IF __cond_27
PRIMITIVE "mayo"
ELSE 
PRIMITIVE "ketchup"
ENDIF 
ENDVARFENCE 
DEFSYM a := PRIMITIVE __if_ret_26
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_26
do
    local __cond_27 = true
    if __cond_27 then
        __if_ret_26 = "mayo"
    else
        __if_ret_26 = "ketchup"
    end
end
__core.a = __if_ret_26
return true

********************************************************************************

compiling:
(def b (if false "horseradish" "wasabi"))

IR:
EMPTYVAR __if_ret_28
VARFENCE 
VAR __cond_29 := PRIMITIVE false
IF __cond_29
PRIMITIVE "horseradish"
ELSE 
PRIMITIVE "wasabi"
ENDIF 
ENDVARFENCE 
DEFSYM b := PRIMITIVE __if_ret_28
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_28
do
    local __cond_29 = false
    if __cond_29 then
        __if_ret_28 = "horseradish"
    else
        __if_ret_28 = "wasabi"
    end
end
__core.b = __if_ret_28
return true

********************************************************************************

compiling:
(print a)

IR:
RET CALL print, a

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

return __core.print(__core.a)

********************************************************************************

compiling:
(print b)

IR:
RET CALL print, b

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

return __core.print(__core.b)

********************************************************************************

compiling:
(def c (if true (if true "ketchup" "mustard") (if false "jam" "gravy")))

IR:
EMPTYVAR __if_ret_30
VARFENCE 
VAR __cond_31 := PRIMITIVE true
IF __cond_31
EMPTYVAR __if_ret_32
VARFENCE 
VAR __cond_33 := PRIMITIVE true
IF __cond_33
PRIMITIVE "ketchup"
ELSE 
PRIMITIVE "mustard"
ENDIF 
ENDVARFENCE 
PRIMITIVE __if_ret_32
ELSE 
EMPTYVAR __if_ret_34
VARFENCE 
VAR __cond_35 := PRIMITIVE false
IF __cond_35
PRIMITIVE "jam"
ELSE 
PRIMITIVE "gravy"
ENDIF 
ENDVARFENCE 
PRIMITIVE __if_ret_34
ENDIF 
ENDVARFENCE 
DEFSYM c := PRIMITIVE __if_ret_30
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

local __if_ret_30
do
    local __cond_31 = true
    if __cond_31 then
        local __if_ret_32
        do
            local __cond_33 = true
            if __cond_33 then
                __if_ret_32 = "ketchup"
            else
                __if_ret_32 = "mustard"
            end
        end
        __if_ret_30 = __if_ret_32
    else
        local __if_ret_34
        do
            local __cond_35 = false
            if __cond_35 then
                __if_ret_34 = "jam"
            else
                __if_ret_34 = "gravy"
            end
        end
        __if_ret_30 = __if_ret_34
    end
end
__core.c = __if_ret_30
return true

********************************************************************************

compiling:
(print c)

IR:
RET CALL print, c

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

return __core.print(__core.c)

********************************************************************************

compiling:
(def f2 (fn [] (+ 1 1) (+ 2 2)))

IR:
DEFSYM f2 := FUNC 
VARFENCE 
CALL +, 1, 1
ENDVARFENCE 
VARFENCE 
RET CALL +, 2, 2
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __core = tsukuyomi.get_namespace("core")

function __core.f2()
    do
        __core.__PLUS__(1, 1)
    end
    do
        return __core.__PLUS__(2, 2)
    end
end
return true

********************************************************************************

compiling:
(def f3 (fn [x] (let [x 1 y x] y)))

