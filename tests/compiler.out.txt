compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(def z2ljr2jlslfl3jf 1)

IR:
DEFSYM z2ljr2jlslfl3jf := PRIMITIVE 1				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["z2ljr2jlslfl3jf"] = 1
return true

********************************************************************************

compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(def a 3)

IR:
DEFSYM a := PRIMITIVE 3				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["a"] = 3
return true

********************************************************************************

compiling:
(def b 4)

IR:
DEFSYM b := PRIMITIVE 4				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["b"] = 4
return true

********************************************************************************

compiling:
(def b a)

IR:
DEFSYM b := PRIMITIVE a				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["b"] = __tsukuyomi__DOT__core["a"]
return true

********************************************************************************

compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(def print (fn [obj] (_emit_ "print(tostring(obj))")))

IR:
DEFSYM print := FUNC obj				ENV: ( obj ) ( )
VARFENCE 				ENV: ( obj ) ( )
RET RAW print(tostring(obj))				ENV: ( obj ) ( )
ENDVARFENCE 				ENV: ( obj ) ( )
ENDFUNC 				ENV: ( obj ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["print"] = function (obj)
	do
		return print(tostring(obj))
	end
end
return true

********************************************************************************

compiling:
(def + (fn [x y] (_emit_ "x + y")))

IR:
DEFSYM + := FUNC x, y				ENV: ( x y ) ( )
VARFENCE 				ENV: ( x y ) ( )
RET RAW x + y				ENV: ( x y ) ( )
ENDVARFENCE 				ENV: ( x y ) ( )
ENDFUNC 				ENV: ( x y ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["+"] = function (x, y)
	do
		return x + y
	end
end
return true

********************************************************************************

compiling:
(def first (fn [cell] (_emit_ "cell[1]")))

IR:
DEFSYM first := FUNC cell				ENV: ( cell ) ( )
VARFENCE 				ENV: ( cell ) ( )
RET RAW cell[1]				ENV: ( cell ) ( )
ENDVARFENCE 				ENV: ( cell ) ( )
ENDFUNC 				ENV: ( cell ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["first"] = function (cell)
	do
		return cell[1]
	end
end
return true

********************************************************************************

compiling:
(def rest (fn [cell] (_emit_ "cell[2]")))

IR:
DEFSYM rest := FUNC cell				ENV: ( cell ) ( )
VARFENCE 				ENV: ( cell ) ( )
RET RAW cell[2]				ENV: ( cell ) ( )
ENDVARFENCE 				ENV: ( cell ) ( )
ENDFUNC 				ENV: ( cell ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["rest"] = function (cell)
	do
		return cell[2]
	end
end
return true

********************************************************************************

compiling:
(let [_cons (_emit_ "tsukuyomi.create_cell")] (def cons (fn [item coll] (_cons item coll))))

IR:
EMPTYVAR __let_ret_0				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR _cons := RAW tsukuyomi.create_cell				ENV: ( _cons ) ( )
VARFENCE 				ENV: ( _cons ) ( )
DEFSYM cons := FUNC item, coll				ENV: ( coll item ) ( _cons ) ( )
VARFENCE 				ENV: ( coll item ) ( _cons ) ( )
RET CALL _cons, item, coll				ENV: ( coll item ) ( _cons ) ( )
ENDVARFENCE 				ENV: ( coll item ) ( _cons ) ( )
ENDFUNC 				ENV: ( coll item ) ( _cons ) ( )
SETVAR __let_ret_0 := PRIMITIVE true				ENV: ( _cons ) ( )
ENDVARFENCE 				ENV: ( _cons ) ( )
ENDVARFENCE 				ENV: ( _cons ) ( )
RET PRIMITIVE __let_ret_0				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __let_ret_0
do
	local _cons = tsukuyomi.create_cell
	do
		__tsukuyomi__DOT__core["cons"] = function (item, coll)
			do
				return _cons(item, coll)
			end
		end
		__let_ret_0 = true
	end
end
return __let_ret_0

********************************************************************************

compiling:
(def second (fn [coll] (first (rest coll))))

IR:
DEFSYM second := FUNC coll				ENV: ( coll ) ( )
VARFENCE 				ENV: ( coll ) ( )
NEWLVAR __arg_1 := CALL rest, coll				ENV: ( coll ) ( )
RET CALL first, __arg_1				ENV: ( coll ) ( )
ENDVARFENCE 				ENV: ( coll ) ( )
ENDFUNC 				ENV: ( coll ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["second"] = function (coll)
	do
		local __arg_1 = __tsukuyomi__DOT__core["rest"](coll)
		return __tsukuyomi__DOT__core["first"](__arg_1)
	end
end
return true

********************************************************************************

compiling:
(def test1 (fn [] (print "foobar")))

IR:
DEFSYM test1 := FUNC 				ENV: ( ) ( )
VARFENCE 				ENV: ( ) ( )
RET CALL print, "foobar"				ENV: ( ) ( )
ENDVARFENCE 				ENV: ( ) ( )
ENDFUNC 				ENV: ( ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["test1"] = function ()
	do
		return __tsukuyomi__DOT__core["print"]("foobar")
	end
end
return true

********************************************************************************

compiling:
(test1)

IR:
RET CALL test1				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["test1"]()

********************************************************************************

compiling:
(print "asdf")

IR:
RET CALL print, "asdf"				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"]("asdf")

********************************************************************************

compiling:
(print (first (cons 9 (cons 8 (cons 7 nil)))))

IR:
NEWLVAR __arg_5 := CALL cons, 7, nil				ENV: ( )
NEWLVAR __arg_4 := CALL cons, 8, __arg_5				ENV: ( )
NEWLVAR __arg_3 := CALL cons, 9, __arg_4				ENV: ( )
NEWLVAR __arg_2 := CALL first, __arg_3				ENV: ( )
RET CALL print, __arg_2				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_5 = __tsukuyomi__DOT__core["cons"](7, nil)
local __arg_4 = __tsukuyomi__DOT__core["cons"](8, __arg_5)
local __arg_3 = __tsukuyomi__DOT__core["cons"](9, __arg_4)
local __arg_2 = __tsukuyomi__DOT__core["first"](__arg_3)
return __tsukuyomi__DOT__core["print"](__arg_2)

********************************************************************************

compiling:
(print (second (cons 9 (cons 8 (cons 7 nil)))))

IR:
NEWLVAR __arg_9 := CALL cons, 7, nil				ENV: ( )
NEWLVAR __arg_8 := CALL cons, 8, __arg_9				ENV: ( )
NEWLVAR __arg_7 := CALL cons, 9, __arg_8				ENV: ( )
NEWLVAR __arg_6 := CALL second, __arg_7				ENV: ( )
RET CALL print, __arg_6				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_9 = __tsukuyomi__DOT__core["cons"](7, nil)
local __arg_8 = __tsukuyomi__DOT__core["cons"](8, __arg_9)
local __arg_7 = __tsukuyomi__DOT__core["cons"](9, __arg_8)
local __arg_6 = __tsukuyomi__DOT__core["second"](__arg_7)
return __tsukuyomi__DOT__core["print"](__arg_6)

********************************************************************************

compiling:
(def user/test "lisp")

IR:
DEFSYM user/test := PRIMITIVE "lisp"				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __user = tsukuyomi.get_namespace("user")

__user["test"] = "lisp"
return true

********************************************************************************

compiling:
(def f? (fn [foo] ((fn [bar] (+ foo bar)) 42)))

IR:
DEFSYM f? := FUNC foo				ENV: ( foo ) ( )
VARFENCE 				ENV: ( foo ) ( )
NEWLVAR __arg_10 := FUNC bar				ENV: ( bar ) ( foo ) ( )
VARFENCE 				ENV: ( bar ) ( foo ) ( )
RET CALL +, foo, bar				ENV: ( bar ) ( foo ) ( )
ENDVARFENCE 				ENV: ( bar ) ( foo ) ( )
ENDFUNC 				ENV: ( bar ) ( foo ) ( )
RET CALL __arg_10, 42				ENV: ( foo ) ( )
ENDVARFENCE 				ENV: ( foo ) ( )
ENDFUNC 				ENV: ( foo ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["f?"] = function (foo)
	do
		local function __arg_10(bar)
			do
				return __tsukuyomi__DOT__core["+"](foo, bar)
			end
		end
		return __arg_10(42)
	end
end
return true

********************************************************************************

compiling:
(print (f? 43))

IR:
NEWLVAR __arg_11 := CALL f?, 43				ENV: ( )
RET CALL print, __arg_11				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_11 = __tsukuyomi__DOT__core["f?"](43)
return __tsukuyomi__DOT__core["print"](__arg_11)

********************************************************************************

compiling:
(if false (print "pepperoni"))

IR:
EMPTYVAR __if_ret_12				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_13 := PRIMITIVE false				ENV: ( )
IF __cond_13				ENV: ( )
SETVAR __if_ret_12 := CALL print, "pepperoni"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_12 := PRIMITIVE nil				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_12				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_12
do
	local __cond_13 = false
	if __cond_13 then
		__if_ret_12 = __tsukuyomi__DOT__core["print"]("pepperoni")
	else
		__if_ret_12 = nil
	end
end
return __if_ret_12

********************************************************************************

compiling:
(if nil (print "hoagie"))

IR:
EMPTYVAR __if_ret_14				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_15 := PRIMITIVE nil				ENV: ( )
IF __cond_15				ENV: ( )
SETVAR __if_ret_14 := CALL print, "hoagie"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_14 := PRIMITIVE nil				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_14				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_14
do
	local __cond_15 = nil
	if __cond_15 then
		__if_ret_14 = __tsukuyomi__DOT__core["print"]("hoagie")
	else
		__if_ret_14 = nil
	end
end
return __if_ret_14

********************************************************************************

compiling:
(if true (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_16				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_17 := PRIMITIVE true				ENV: ( )
IF __cond_17				ENV: ( )
SETVAR __if_ret_16 := CALL print, "pizza"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_16 := CALL print, "hotdog"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_16				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_16
do
	local __cond_17 = true
	if __cond_17 then
		__if_ret_16 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_16 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_16

********************************************************************************

compiling:
(if false (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_18				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_19 := PRIMITIVE false				ENV: ( )
IF __cond_19				ENV: ( )
SETVAR __if_ret_18 := CALL print, "pizza"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_18 := CALL print, "hotdog"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_18				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_18
do
	local __cond_19 = false
	if __cond_19 then
		__if_ret_18 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_18 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_18

********************************************************************************

compiling:
(if ((fn [] (+ 1 1))) (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_20				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __arg_22 := FUNC 				ENV: ( ) ( )
VARFENCE 				ENV: ( ) ( )
RET CALL +, 1, 1				ENV: ( ) ( )
ENDVARFENCE 				ENV: ( ) ( )
ENDFUNC 				ENV: ( ) ( )
NEWLVAR __cond_21 := CALL __arg_22				ENV: ( )
IF __cond_21				ENV: ( )
SETVAR __if_ret_20 := CALL print, "pizza"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_20 := CALL print, "hotdog"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_20				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_20
do
	local function __arg_22()
		do
			return __tsukuyomi__DOT__core["+"](1, 1)
		end
	end
	local __cond_21 = __arg_22()
	if __cond_21 then
		__if_ret_20 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_20 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_20

********************************************************************************

compiling:
(if ((fn [] nil)) (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_23				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __arg_25 := FUNC 				ENV: ( ) ( )
VARFENCE 				ENV: ( ) ( )
RET PRIMITIVE nil				ENV: ( ) ( )
ENDVARFENCE 				ENV: ( ) ( )
ENDFUNC 				ENV: ( ) ( )
NEWLVAR __cond_24 := CALL __arg_25				ENV: ( )
IF __cond_24				ENV: ( )
SETVAR __if_ret_23 := CALL print, "pizza"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_23 := CALL print, "hotdog"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_23				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_23
do
	local function __arg_25()
		do
			return nil
		end
	end
	local __cond_24 = __arg_25()
	if __cond_24 then
		__if_ret_23 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_23 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_23

********************************************************************************

compiling:
(if ((fn [] true)) ((fn [x] (print (+ 1 x))) 24) (print "hotdog"))

IR:
EMPTYVAR __if_ret_26				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __arg_29 := FUNC 				ENV: ( ) ( )
VARFENCE 				ENV: ( ) ( )
RET PRIMITIVE true				ENV: ( ) ( )
ENDVARFENCE 				ENV: ( ) ( )
ENDFUNC 				ENV: ( ) ( )
NEWLVAR __cond_27 := CALL __arg_29				ENV: ( )
IF __cond_27				ENV: ( )
NEWLVAR __arg_28 := FUNC x				ENV: ( x ) ( )
VARFENCE 				ENV: ( x ) ( )
NEWLVAR __arg_30 := CALL +, 1, x				ENV: ( x ) ( )
RET CALL print, __arg_30				ENV: ( x ) ( )
ENDVARFENCE 				ENV: ( x ) ( )
ENDFUNC 				ENV: ( x ) ( )
SETVAR __if_ret_26 := CALL __arg_28, 24				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_26 := CALL print, "hotdog"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
RET PRIMITIVE __if_ret_26				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_26
do
	local function __arg_29()
		do
			return true
		end
	end
	local __cond_27 = __arg_29()
	if __cond_27 then
		local function __arg_28(x)
			do
				local __arg_30 = __tsukuyomi__DOT__core["+"](1, x)
				return __tsukuyomi__DOT__core["print"](__arg_30)
			end
		end
		__if_ret_26 = __arg_28(24)
	else
		__if_ret_26 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_26

********************************************************************************

compiling:
(def a (if true "mayo" "ketchup"))

IR:
EMPTYVAR __if_ret_31				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_32 := PRIMITIVE true				ENV: ( )
IF __cond_32				ENV: ( )
SETVAR __if_ret_31 := PRIMITIVE "mayo"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_31 := PRIMITIVE "ketchup"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
DEFSYM a := PRIMITIVE __if_ret_31				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_31
do
	local __cond_32 = true
	if __cond_32 then
		__if_ret_31 = "mayo"
	else
		__if_ret_31 = "ketchup"
	end
end
__tsukuyomi__DOT__core["a"] = __if_ret_31
return true

********************************************************************************

compiling:
(def b (if false "horseradish" "wasabi"))

IR:
EMPTYVAR __if_ret_33				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_34 := PRIMITIVE false				ENV: ( )
IF __cond_34				ENV: ( )
SETVAR __if_ret_33 := PRIMITIVE "horseradish"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_33 := PRIMITIVE "wasabi"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
DEFSYM b := PRIMITIVE __if_ret_33				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_33
do
	local __cond_34 = false
	if __cond_34 then
		__if_ret_33 = "horseradish"
	else
		__if_ret_33 = "wasabi"
	end
end
__tsukuyomi__DOT__core["b"] = __if_ret_33
return true

********************************************************************************

compiling:
(print a)

IR:
RET CALL print, a				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"](__tsukuyomi__DOT__core["a"])

********************************************************************************

compiling:
(print b)

IR:
RET CALL print, b				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"](__tsukuyomi__DOT__core["b"])

********************************************************************************

compiling:
(def c (if true (if true "ketchup" "mustard") (if false "jam" "gravy")))

IR:
EMPTYVAR __if_ret_35				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_36 := PRIMITIVE true				ENV: ( )
IF __cond_36				ENV: ( )
EMPTYVAR __if_ret_37				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_38 := PRIMITIVE true				ENV: ( )
IF __cond_38				ENV: ( )
SETVAR __if_ret_37 := PRIMITIVE "ketchup"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_37 := PRIMITIVE "mustard"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
SETVAR __if_ret_35 := PRIMITIVE __if_ret_37				ENV: ( )
ELSE 				ENV: ( )
EMPTYVAR __if_ret_39				ENV: ( )
VARFENCE 				ENV: ( )
NEWLVAR __cond_40 := PRIMITIVE false				ENV: ( )
IF __cond_40				ENV: ( )
SETVAR __if_ret_39 := PRIMITIVE "jam"				ENV: ( )
ELSE 				ENV: ( )
SETVAR __if_ret_39 := PRIMITIVE "gravy"				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
SETVAR __if_ret_35 := PRIMITIVE __if_ret_39				ENV: ( )
ENDIF 				ENV: ( )
ENDVARFENCE 				ENV: ( )
DEFSYM c := PRIMITIVE __if_ret_35				ENV: ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_35
do
	local __cond_36 = true
	if __cond_36 then
		local __if_ret_37
		do
			local __cond_38 = true
			if __cond_38 then
				__if_ret_37 = "ketchup"
			else
				__if_ret_37 = "mustard"
			end
		end
		__if_ret_35 = __if_ret_37
	else
		local __if_ret_39
		do
			local __cond_40 = false
			if __cond_40 then
				__if_ret_39 = "jam"
			else
				__if_ret_39 = "gravy"
			end
		end
		__if_ret_35 = __if_ret_39
	end
end
__tsukuyomi__DOT__core["c"] = __if_ret_35
return true

********************************************************************************

compiling:
(print c)

IR:
RET CALL print, c				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"](__tsukuyomi__DOT__core["c"])

********************************************************************************

compiling:
(def f2 (fn [] (+ 1 1) (+ 2 2)))

IR:
DEFSYM f2 := FUNC 				ENV: ( ) ( )
VARFENCE 				ENV: ( ) ( )
CALL +, 1, 1				ENV: ( ) ( )
ENDVARFENCE 				ENV: ( ) ( )
VARFENCE 				ENV: ( ) ( )
RET CALL +, 2, 2				ENV: ( ) ( )
ENDVARFENCE 				ENV: ( ) ( )
ENDFUNC 				ENV: ( ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["f2"] = function ()
	do
		__tsukuyomi__DOT__core["+"](1, 1)
	end
	do
		return __tsukuyomi__DOT__core["+"](2, 2)
	end
end
return true

********************************************************************************

compiling:
(def f3 (fn [x] (let [x 1 y x] y)))

IR:
DEFSYM f3 := FUNC x				ENV: ( x ) ( )
VARFENCE 				ENV: ( x ) ( )
EMPTYVAR __let_ret_41				ENV: ( x ) ( )
VARFENCE 				ENV: ( x ) ( )
NEWLVAR x := PRIMITIVE 1				ENV: ( x ) ( x ) ( )
NEWLVAR y := PRIMITIVE x				ENV: ( y ) ( x ) ( x ) ( )
VARFENCE 				ENV: ( y ) ( x ) ( x ) ( )
SETVAR __let_ret_41 := PRIMITIVE y				ENV: ( y ) ( x ) ( x ) ( )
ENDVARFENCE 				ENV: ( y ) ( x ) ( x ) ( )
ENDVARFENCE 				ENV: ( y ) ( x ) ( x ) ( )
RET PRIMITIVE __let_ret_41				ENV: ( x ) ( )
ENDVARFENCE 				ENV: ( x ) ( )
ENDFUNC 				ENV: ( x ) ( )
RET PRIMITIVE true				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["f3"] = function (x)
	do
		local __let_ret_41
		do
			local x = 1
			local y = x
			do
				__let_ret_41 = y
			end
		end
		return __let_ret_41
	end
end
return true

********************************************************************************

compiling:
(print (f3 42))

IR:
NEWLVAR __arg_42 := CALL f3, 42				ENV: ( )
RET CALL print, __arg_42				ENV: ( )

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_42 = __tsukuyomi__DOT__core["f3"](42)
return __tsukuyomi__DOT__core["print"](__arg_42)

********************************************************************************

