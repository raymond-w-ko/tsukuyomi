compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(def z2ljr2jlslfl3jf 1)

IR:
DEFSYM z2ljr2jlslfl3jf := PRIMITIVE 1
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["z2ljr2jlslfl3jf"] = 1
return true

********************************************************************************

compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(def a 3)

IR:
DEFSYM a := PRIMITIVE 3
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["a"] = 3
return true

********************************************************************************

compiling:
(def b 4)

IR:
DEFSYM b := PRIMITIVE 4
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["b"] = 4
return true

********************************************************************************

compiling:
(def b a)

IR:
DEFSYM b := PRIMITIVE a
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["b"] = __tsukuyomi__DOT__core["a"]
return true

********************************************************************************

compiling:
(ns tsukuyomi.core)

IR:
NS tsukuyomi.core
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

tsukuyomi.set_active_namespace("tsukuyomi.core"); 
return true

********************************************************************************

compiling:
(def print (fn [obj] (_raw_ "print(tostring(obj))")))

IR:
DEFSYM print := FUNC obj
VARFENCE 
RET RAW print(tostring(obj))
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["print"] = function (obj)
	do
		return print(tostring(obj))
	end
end
return true

********************************************************************************

compiling:
(def + (fn [x y] (_raw_ "x + y")))

IR:
DEFSYM + := FUNC x, y
VARFENCE 
RET RAW x + y
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["+"] = function (x, y)
	do
		return x + y
	end
end
return true

********************************************************************************

compiling:
(def first (fn [cell] (_raw_ "cell[1]")))

IR:
DEFSYM first := FUNC cell
VARFENCE 
RET RAW cell[1]
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["first"] = function (cell)
	do
		return cell[1]
	end
end
return true

********************************************************************************

compiling:
(def rest (fn [cell] (_raw_ "cell[2]")))

IR:
DEFSYM rest := FUNC cell
VARFENCE 
RET RAW cell[2]
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["rest"] = function (cell)
	do
		return cell[2]
	end
end
return true

********************************************************************************

compiling:
(let [_cons (_raw_ "tsukuyomi.create_cell")] (def cons (fn [item coll] (_cons item coll))))

IR:
EMPTYVAR __let_ret_0
VARFENCE 
LETFRAME _cons
NEWLVAR _cons := RAW tsukuyomi.create_cell
VARFENCE 
DEFSYM cons := FUNC item, coll
VARFENCE 
RET CALL _cons, item, coll
ENDVARFENCE 
ENDFUNC 
VAR __let_ret_0 := PRIMITIVE true
ENDVARFENCE 
ENDLETFRAME 
ENDVARFENCE 
RET PRIMITIVE __let_ret_0

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __let_ret_0
do
	local _cons = tsukuyomi.create_cell
	do
		__tsukuyomi__DOT__core["cons"] = function (item, coll)
			do
				return _cons(item, coll)
			end
		end
		__let_ret_0 = true
	end
end
return __let_ret_0

********************************************************************************

compiling:
(def second (fn [coll] (first (rest coll))))

IR:
DEFSYM second := FUNC coll
VARFENCE 
NEWLVAR __arg_1 := CALL rest, coll
RET CALL first, __arg_1
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["second"] = function (coll)
	do
		local __arg_1 = __tsukuyomi__DOT__core["rest"](coll)
		return __tsukuyomi__DOT__core["first"](__arg_1)
	end
end
return true

********************************************************************************

compiling:
(print "asdf")

IR:
RET CALL print, "asdf"

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"]("asdf")

********************************************************************************

compiling:
(print (second (quote (42 43))))

IR:
NEWLVAR __arg_3 := DATA table: 0x030e32d8
NEWLVAR __arg_2 := CALL second, __arg_3
RET CALL print, __arg_2

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __data0 = tsukuyomi._get_data(0)

local __arg_3 = __data0
local __arg_2 = __tsukuyomi__DOT__core["second"](__arg_3)
return __tsukuyomi__DOT__core["print"](__arg_2)

********************************************************************************

compiling:
(print (first (quote (3 4 5))))

IR:
NEWLVAR __arg_5 := DATA table: 0x030e3710
NEWLVAR __arg_4 := CALL first, __arg_5
RET CALL print, __arg_4

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __data1 = tsukuyomi._get_data(1)

local __arg_5 = __data1
local __arg_4 = __tsukuyomi__DOT__core["first"](__arg_5)
return __tsukuyomi__DOT__core["print"](__arg_4)

********************************************************************************

compiling:
(print (first (cons 9 (cons 8 (cons 7 nil)))))

IR:
NEWLVAR __arg_9 := CALL cons, 7, nil
NEWLVAR __arg_8 := CALL cons, 8, __arg_9
NEWLVAR __arg_7 := CALL cons, 9, __arg_8
NEWLVAR __arg_6 := CALL first, __arg_7
RET CALL print, __arg_6

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_9 = __tsukuyomi__DOT__core["cons"](7, nil)
local __arg_8 = __tsukuyomi__DOT__core["cons"](8, __arg_9)
local __arg_7 = __tsukuyomi__DOT__core["cons"](9, __arg_8)
local __arg_6 = __tsukuyomi__DOT__core["first"](__arg_7)
return __tsukuyomi__DOT__core["print"](__arg_6)

********************************************************************************

compiling:
(print (second (cons 9 (cons 8 (cons 7 nil)))))

IR:
NEWLVAR __arg_13 := CALL cons, 7, nil
NEWLVAR __arg_12 := CALL cons, 8, __arg_13
NEWLVAR __arg_11 := CALL cons, 9, __arg_12
NEWLVAR __arg_10 := CALL second, __arg_11
RET CALL print, __arg_10

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_13 = __tsukuyomi__DOT__core["cons"](7, nil)
local __arg_12 = __tsukuyomi__DOT__core["cons"](8, __arg_13)
local __arg_11 = __tsukuyomi__DOT__core["cons"](9, __arg_12)
local __arg_10 = __tsukuyomi__DOT__core["second"](__arg_11)
return __tsukuyomi__DOT__core["print"](__arg_10)

********************************************************************************

compiling:
(def user/test "lisp")

IR:
DEFSYM user/test := PRIMITIVE "lisp"
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __user = tsukuyomi.get_namespace("user")

__user["test"] = "lisp"
return true

********************************************************************************

compiling:
(def f? (fn [foo] ((fn [bar] (+ foo bar)) 42)))

IR:
DEFSYM f? := FUNC foo
VARFENCE 
NEWLVAR __arg_14 := FUNC bar
VARFENCE 
RET CALL +, foo, bar
ENDVARFENCE 
ENDFUNC 
RET CALL __arg_14, 42
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["f?"] = function (foo)
	do
		local function __arg_14(bar)
			do
				return __tsukuyomi__DOT__core["+"](foo, bar)
			end
		end
		return __arg_14(42)
	end
end
return true

********************************************************************************

compiling:
(print (f? 43))

IR:
NEWLVAR __arg_15 := CALL f?, 43
RET CALL print, __arg_15

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_15 = __tsukuyomi__DOT__core["f?"](43)
return __tsukuyomi__DOT__core["print"](__arg_15)

********************************************************************************

compiling:
(if false (print "pepperoni"))

IR:
EMPTYVAR __if_ret_16
VARFENCE 
NEWLVAR __cond_17 := PRIMITIVE false
IF __cond_17
VAR __if_ret_16 := CALL print, "pepperoni"
ELSE 
VAR __if_ret_16 := PRIMITIVE nil
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_16

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_16
do
	local __cond_17 = false
	if __cond_17 then
		__if_ret_16 = __tsukuyomi__DOT__core["print"]("pepperoni")
	else
		__if_ret_16 = nil
	end
end
return __if_ret_16

********************************************************************************

compiling:
(if nil (print "hoagie"))

IR:
EMPTYVAR __if_ret_18
VARFENCE 
NEWLVAR __cond_19 := PRIMITIVE nil
IF __cond_19
VAR __if_ret_18 := CALL print, "hoagie"
ELSE 
VAR __if_ret_18 := PRIMITIVE nil
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_18

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_18
do
	local __cond_19 = nil
	if __cond_19 then
		__if_ret_18 = __tsukuyomi__DOT__core["print"]("hoagie")
	else
		__if_ret_18 = nil
	end
end
return __if_ret_18

********************************************************************************

compiling:
(if true (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_20
VARFENCE 
NEWLVAR __cond_21 := PRIMITIVE true
IF __cond_21
VAR __if_ret_20 := CALL print, "pizza"
ELSE 
VAR __if_ret_20 := CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_20

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_20
do
	local __cond_21 = true
	if __cond_21 then
		__if_ret_20 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_20 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_20

********************************************************************************

compiling:
(if false (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_22
VARFENCE 
NEWLVAR __cond_23 := PRIMITIVE false
IF __cond_23
VAR __if_ret_22 := CALL print, "pizza"
ELSE 
VAR __if_ret_22 := CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_22

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_22
do
	local __cond_23 = false
	if __cond_23 then
		__if_ret_22 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_22 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_22

********************************************************************************

compiling:
(if ((fn [] (+ 1 1))) (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_24
VARFENCE 
NEWLVAR __arg_26 := FUNC 
VARFENCE 
RET CALL +, 1, 1
ENDVARFENCE 
ENDFUNC 
NEWLVAR __cond_25 := CALL __arg_26
IF __cond_25
VAR __if_ret_24 := CALL print, "pizza"
ELSE 
VAR __if_ret_24 := CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_24

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_24
do
	local function __arg_26()
		do
			return __tsukuyomi__DOT__core["+"](1, 1)
		end
	end
	local __cond_25 = __arg_26()
	if __cond_25 then
		__if_ret_24 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_24 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_24

********************************************************************************

compiling:
(if ((fn [] nil)) (print "pizza") (print "hotdog"))

IR:
EMPTYVAR __if_ret_27
VARFENCE 
NEWLVAR __arg_29 := FUNC 
VARFENCE 
RET PRIMITIVE nil
ENDVARFENCE 
ENDFUNC 
NEWLVAR __cond_28 := CALL __arg_29
IF __cond_28
VAR __if_ret_27 := CALL print, "pizza"
ELSE 
VAR __if_ret_27 := CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_27

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_27
do
	local function __arg_29()
		do
			return nil
		end
	end
	local __cond_28 = __arg_29()
	if __cond_28 then
		__if_ret_27 = __tsukuyomi__DOT__core["print"]("pizza")
	else
		__if_ret_27 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_27

********************************************************************************

compiling:
(if ((fn [] true)) ((fn [x] (print (+ 1 x))) 24) (print "hotdog"))

IR:
EMPTYVAR __if_ret_30
VARFENCE 
NEWLVAR __arg_33 := FUNC 
VARFENCE 
RET PRIMITIVE true
ENDVARFENCE 
ENDFUNC 
NEWLVAR __cond_31 := CALL __arg_33
IF __cond_31
NEWLVAR __arg_32 := FUNC x
VARFENCE 
NEWLVAR __arg_34 := CALL +, 1, x
RET CALL print, __arg_34
ENDVARFENCE 
ENDFUNC 
VAR __if_ret_30 := CALL __arg_32, 24
ELSE 
VAR __if_ret_30 := CALL print, "hotdog"
ENDIF 
ENDVARFENCE 
RET PRIMITIVE __if_ret_30

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_30
do
	local function __arg_33()
		do
			return true
		end
	end
	local __cond_31 = __arg_33()
	if __cond_31 then
		local function __arg_32(x)
			do
				local __arg_34 = __tsukuyomi__DOT__core["+"](1, x)
				return __tsukuyomi__DOT__core["print"](__arg_34)
			end
		end
		__if_ret_30 = __arg_32(24)
	else
		__if_ret_30 = __tsukuyomi__DOT__core["print"]("hotdog")
	end
end
return __if_ret_30

********************************************************************************

compiling:
(def a (if true "mayo" "ketchup"))

IR:
EMPTYVAR __if_ret_35
VARFENCE 
NEWLVAR __cond_36 := PRIMITIVE true
IF __cond_36
VAR __if_ret_35 := PRIMITIVE "mayo"
ELSE 
VAR __if_ret_35 := PRIMITIVE "ketchup"
ENDIF 
ENDVARFENCE 
DEFSYM a := PRIMITIVE __if_ret_35
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_35
do
	local __cond_36 = true
	if __cond_36 then
		__if_ret_35 = "mayo"
	else
		__if_ret_35 = "ketchup"
	end
end
__tsukuyomi__DOT__core["a"] = __if_ret_35
return true

********************************************************************************

compiling:
(def b (if false "horseradish" "wasabi"))

IR:
EMPTYVAR __if_ret_37
VARFENCE 
NEWLVAR __cond_38 := PRIMITIVE false
IF __cond_38
VAR __if_ret_37 := PRIMITIVE "horseradish"
ELSE 
VAR __if_ret_37 := PRIMITIVE "wasabi"
ENDIF 
ENDVARFENCE 
DEFSYM b := PRIMITIVE __if_ret_37
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_37
do
	local __cond_38 = false
	if __cond_38 then
		__if_ret_37 = "horseradish"
	else
		__if_ret_37 = "wasabi"
	end
end
__tsukuyomi__DOT__core["b"] = __if_ret_37
return true

********************************************************************************

compiling:
(print a)

IR:
RET CALL print, a

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"](__tsukuyomi__DOT__core["a"])

********************************************************************************

compiling:
(print b)

IR:
RET CALL print, b

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"](__tsukuyomi__DOT__core["b"])

********************************************************************************

compiling:
(def c (if true (if true "ketchup" "mustard") (if false "jam" "gravy")))

IR:
EMPTYVAR __if_ret_39
VARFENCE 
NEWLVAR __cond_40 := PRIMITIVE true
IF __cond_40
EMPTYVAR __if_ret_41
VARFENCE 
NEWLVAR __cond_42 := PRIMITIVE true
IF __cond_42
VAR __if_ret_41 := PRIMITIVE "ketchup"
ELSE 
VAR __if_ret_41 := PRIMITIVE "mustard"
ENDIF 
ENDVARFENCE 
VAR __if_ret_39 := PRIMITIVE __if_ret_41
ELSE 
EMPTYVAR __if_ret_43
VARFENCE 
NEWLVAR __cond_44 := PRIMITIVE false
IF __cond_44
VAR __if_ret_43 := PRIMITIVE "jam"
ELSE 
VAR __if_ret_43 := PRIMITIVE "gravy"
ENDIF 
ENDVARFENCE 
VAR __if_ret_39 := PRIMITIVE __if_ret_43
ENDIF 
ENDVARFENCE 
DEFSYM c := PRIMITIVE __if_ret_39
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __if_ret_39
do
	local __cond_40 = true
	if __cond_40 then
		local __if_ret_41
		do
			local __cond_42 = true
			if __cond_42 then
				__if_ret_41 = "ketchup"
			else
				__if_ret_41 = "mustard"
			end
		end
		__if_ret_39 = __if_ret_41
	else
		local __if_ret_43
		do
			local __cond_44 = false
			if __cond_44 then
				__if_ret_43 = "jam"
			else
				__if_ret_43 = "gravy"
			end
		end
		__if_ret_39 = __if_ret_43
	end
end
__tsukuyomi__DOT__core["c"] = __if_ret_39
return true

********************************************************************************

compiling:
(print c)

IR:
RET CALL print, c

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

return __tsukuyomi__DOT__core["print"](__tsukuyomi__DOT__core["c"])

********************************************************************************

compiling:
(def f2 (fn [] (+ 1 1) (+ 2 2)))

IR:
DEFSYM f2 := FUNC 
VARFENCE 
CALL +, 1, 1
ENDVARFENCE 
VARFENCE 
RET CALL +, 2, 2
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["f2"] = function ()
	do
		__tsukuyomi__DOT__core["+"](1, 1)
	end
	do
		return __tsukuyomi__DOT__core["+"](2, 2)
	end
end
return true

********************************************************************************

compiling:
(def f3 (fn [x] (let [x 1 y x] y)))

IR:
DEFSYM f3 := FUNC x
VARFENCE 
EMPTYVAR __let_ret_45
VARFENCE 
LETFRAME x, y
NEWLVAR x := PRIMITIVE 1
NEWLVAR y := PRIMITIVE x
VARFENCE 
VAR __let_ret_45 := PRIMITIVE y
ENDVARFENCE 
ENDLETFRAME 
ENDVARFENCE 
RET PRIMITIVE __let_ret_45
ENDVARFENCE 
ENDFUNC 
RET PRIMITIVE true

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

__tsukuyomi__DOT__core["f3"] = function (x)
	do
		local __let_ret_45
		do
			local x = 1
			local y = x
			do
				__let_ret_45 = y
			end
		end
		return __let_ret_45
	end
end
return true

********************************************************************************

compiling:
(print (f3 42))

IR:
NEWLVAR __arg_46 := CALL f3, 42
RET CALL print, __arg_46

Lua source code:
local tsukuyomi = tsukuyomi

local __tsukuyomi__DOT__core = tsukuyomi.get_namespace("tsukuyomi.core")

local __arg_46 = __tsukuyomi__DOT__core["f3"](42)
return __tsukuyomi__DOT__core["print"](__arg_46)

********************************************************************************

