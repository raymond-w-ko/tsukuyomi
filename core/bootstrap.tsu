(ns tsukuyomi.core)

(def tget
  (fn [key table]
    (_emit_ "table[key]")))

(def tassoc!
  (fn [table key value]
    (_emit_ "table[key] = value")
    nil))

(def nil?
  (fn [x]
    (_emit_ "(x == nil)")))

;; this is Lua's ==
(def ===
  (fn [x y] (_emit_ "x == y")))

(def first
  (fn [coll]
    (.first coll)))

(def rest
  (fn [coll]
    (.rest coll)))

(def conj
  (fn [coll x]
    (.conj coll x)))

(def cons
  (fn [x seq]
    (.cons seq x)))

(def second
  (fn [cell]
    (first (rest cell))))

(def get
  (fn [map key]
    (.get map key)))

(def assoc
  (fn [map key value]
    (.assoc map key value)))

(def hash
  (fn [x]
    (.hasheq x)))

(def seq
  (fn [coll]
    (if (nil? coll)
     nil
    (.seq coll))))

(def print
  (fn [x]
    (_emit_ "io.write(tsukuyomi.print(x))")
    (_emit_ "io.write('\\n')")
    nil))

(def concat
  (fn
    ([] '()) 
    ([x]
     (if (=== x nil)
       '()
       (seq x)))
    ([x y]
     (. tsukuyomi.lang.ConcatSeq new nil (seq x) (seq y)))))

(def count
  (fn [coll] (.count coll)))

(def =
  (fn [x y] (=== x y)))

(let [_apply tsukuyomi.core/_apply]
  (def apply
    (fn
      ([f args]
       (_apply f args)))))

(def list
  (fn
    ([] '())
    ([& args] args)))

;; relies on apply, list
(def
  ^{:macro true} defn
  (fn [name & forms]
   (list 'def name (concat (list 'fn) forms))))

(def +
  (fn
    [x y] (_emit_ "(x + y)")))
