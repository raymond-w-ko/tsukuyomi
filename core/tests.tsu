;; test upper limit to make sure you can have 20 args
(fn
  [arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10 
   arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20]
  "max args fn")

;;; uncomment these to test compiler errors

;(fn
  ;[arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
   ;arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21]
  ;"compile error close")

;(fn
  ;[arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
   ;arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 args22]
  ;"compile error close")

;(fn
  ;[arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
   ;arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 args22 args23]
  ;"compile error way too much")

;; test upper limit to make sure you can have 20 args & rest
(fn
  [arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
   arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 & rest]
  "max args fn with rest")

(def maxargs (fn
  [arg1 arg2 arg3 arg4 arg5 arg6 arg7 arg8 arg9 arg10
   arg11 arg12 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 & rest]
  (print rest)))

(print (maxargs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))
(print (maxargs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 "rest1"))
(print (maxargs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 "rest1" "rest2"))

(print (list))
(print (list 1))
(print (list 1 2))
(print (list 1 2 3))
(print (list 1 2 3 4))
(print (list 1 2 3 4 5))
(print (list 1 2 3 4 5 6))
(print (list 1 2 3 4 5 6 7))
(print (list 1 2 3 4 5 6 7 8))
(print (list 1 2 3 4 5 6 7 8 9))
(print (list 1 2 3 4 5 6 7 8 9 10))
(print (list 1 2 3 4 5 6 7 8 9 10 11))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 13))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20))
(print (list 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21))

(def test0
  (fn
    ([] "zerg")
    ([& args] (cons "ayy" args))))

(print (test0))
(print (test0 "foo"))
(print (test0 "foo" 1))
(print (test0 "foo" 1 2))
(print (test0 "foo" 1 2 3))
(print (test0 "foo" 1 2 3 4))
(print (test0 "foo" 1 2 3 4 5))
(print (test0 "foo" 1 2 3 4 5 6))
(print (test0 "foo" 1 2 3 4 5 6 7))
(print (test0 "foo" 1 2 3 4 5 6 7 8))
(print (test0 "foo" 1 2 3 4 5 6 7 8 9))
(print (test0 "foo" 1 2 3 4 5 6 7 8 9 10))
(print (test0 "foo" 1 2 3 4 5 6 7 8 9 10 11))
(print (test0 "foo" 1 2 3 4 5 6 7 8 9 10 11 12))


(def test1
  (fn
    ([x] "x")
    ([x & args] (cons x args))))

(print (test1 "foo"))
(print (test1 "foo" 1))
(print (test1 "foo" 1 2))
(print (test1 "foo" 1 2 3))
(print (test1 "foo" 1 2 3 4))
(print (test1 "foo" 1 2 3 4 5))
(print (test1 "foo" 1 2 3 4 5 6))
(print (test1 "foo" 1 2 3 4 5 6 7))
(print (test1 "foo" 1 2 3 4 5 6 7 8))
(print (test1 "foo" 1 2 3 4 5 6 7 8 9))
(print (test1 "foo" 1 2 3 4 5 6 7 8 9 10))
(print (test1 "foo" 1 2 3 4 5 6 7 8 9 10 11))
(print (test1 "foo" 1 2 3 4 5 6 7 8 9 10 11 12))

(def test2
  (fn
    ([x y] "x")
    ([x y & args] (cons x args))))

(print (test2 "foo" "bar"))
(print (test2 "foo" 1))
(print (test2 "foo" 1 2))
(print (test2 "foo" 1 2 3))
(print (test2 "foo" 1 2 3 4))
(print (test2 "foo" 1 2 3 4 5))
(print (test2 "foo" 1 2 3 4 5 6))
(print (test2 "foo" 1 2 3 4 5 6 7))
(print (test2 "foo" 1 2 3 4 5 6 7 8))
(print (test2 "foo" 1 2 3 4 5 6 7 8 9))
(print (test2 "foo" 1 2 3 4 5 6 7 8 9 10))
(print (test2 "foo" 1 2 3 4 5 6 7 8 9 10 11))
(print (test2 "foo" 1 2 3 4 5 6 7 8 9 10 11 12))

(def test3
  (fn
    ([x y] "arity 2")
    ([x y & args] "arity 2 & rest")))

(print (test3 "foo" "bar"))

(def test3
  (fn
    ([x y & args] "arity 2 & rest")))

(print (test3 "foo" "bar"))

(print "vector seq test")
(print (seq []))
(print (seq [1]))
(print (seq [1 2]))
(print (seq [1 2 3]))
(print (seq [1 2 (+ 42 1)]))
(print "END vector seq test")

(print (concat '(1 2 3) '(4 5 6)))
(let [x (concat '(1) '(2))]
  (print (count x))
  (print (count x))
  )

